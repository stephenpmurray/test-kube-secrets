
initContainer with kubectl
initContainer with "service account" access to k8s cluster

"random password generation" mechanism (maybe Helm has something we could use here?)

  https://itnext.io/manage-auto-generated-secrets-in-your-helm-charts-5aee48ba6918
  this has kubectl and helm: https://hub.docker.com/r/dtzar/helm-kubectl/

write password to k8s Secret

container with envFrom k8s Secret

can just be a "busybox" that prints the value for now


https://stackoverflow.com/questions/60771876/best-practices-passing-configurations-certificates-and-secrets-with-helm-install
https://helm.sh/docs/chart_best_practices/#the-chart-best-practices-guide

pre-install secrets with a hook:
https://helm.sh/docs/topics/charts_hooks/


---------------------------------------------
21/10/21

- secrets.data.secret should be camelCase not LIKE_THIS
- when initialising an empty dict for secrets, ensure data field is created.
- if we use the pre-install hook, secrets aren't deleted automatically

- there is a helm lint tool availble (cool)
- helm install --dry-run --debug is a good way to find out whats being templated


discussion of how to restart containers when secrets change:
https://github.com/kubernetes/kubernetes/issues/24957

------------------------------------------------------

  22/10/21

- create a service account (and make a manifest for this?)
    with access to specific list of secrets in nearbyone-controller namespace - nso-secret, oathkeeper-secret
    scope this to a namespace and check that only the correct secrets are being read.
- k8s Job or Pod that:
    checks whether the secret has already been created and has the expected value (non-empty, or for bonus points, validate against expected format)
    if not, runs the "generate" command && sets the secret
      find a minimal kubectl image, then we can think about building custom images (kubectl + openssh, kubectl + oathkeeper)
      running kubectl get secret secret-name from inside the container would be enough to verify that it works as expected
      also will then need to give the service account secret-write permissions

kubectl apply -f manifests/serviceaccount.yml
kubectl create rolebinding secretpeeper --clusterrole=secret-reader --serviceaccount=default:secret-peeper --namespace=default
